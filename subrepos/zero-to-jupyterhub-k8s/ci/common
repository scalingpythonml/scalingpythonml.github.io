#!/bin/sh
# Use https://www.shellcheck.net/ to reduce mistakes if you make changes to this file.

setup_helm () {
    echo "setup helm ${HELM_VERSION}"
    curl -sf https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | DESIRED_VERSION=${HELM_VERSION} bash
}

await_pebble() {
    kubectl rollout status --watch --timeout 300s deployment/pebble \
        && kubectl rollout status --watch --timeout 300s deployment/pebble-coredns \
        || {
        echo "Startup of Pebble failed!"
        kubectl describe pod -l app.kubernetes.io/name=pebble
        kubectl logs deploy/pebble --all-containers # --prefix
        kubectl describe pod -l app.kubernetes.io/name=pebble-coredns
        kubectl logs deploy/pebble-coredns --all-containers # --prefix
        exit 1
    }
}

await_jupyterhub() {
    kubectl rollout status --watch --timeout 300s deployment/proxy \
        && kubectl rollout status --watch --timeout 300s deployment/hub \
        && (
        if kubectl get deploy/autohttps &> /dev/null; then
            kubectl rollout status --watch --timeout 300s deployment/autohttps || exit 1
        fi
    )\
        || {
        echo "Startup of JupyterHub failed!"
        kubectl get all
        kubectl describe pod -l component=hub
        kubectl logs deploy/hub --all-containers # --prefix
        kubectl describe pod -l component=proxy
        kubectl logs deploy/proxy --all-containers # --prefix
        kubectl describe pod -l component=autohttps || true
        kubectl logs deploy/autohttps --all-containers || true # --prefix || true
        exit 1
    }
}

await_autohttps_tls_cert_acquisition() {
    i=0; while [ $i -ne 60 ]; do
        kubectl logs deploy/autohttps -c traefik | grep "Adding certificate" \
            && acquired_cert=true && break \
            || acquired_cert=false && sleep 0.5 && i=$((i + 1))
    done
    if [ "$acquired_cert" != "true" ]; then
        echo "Certificate acquisition failed!"
        kubectl get service,networkpolicy,configmap,pod
        kubectl describe pod -l app.kubernetes.io/name=pebble
        kubectl logs deploy/pebble --all-containers # --prefix
        kubectl describe pod -l app.kubernetes.io/name=pebble-coredns
        kubectl logs deploy/pebble-coredns --all-containers # --prefix
        kubectl describe pod -l component=autohttps
        kubectl logs deploy/autohttps --all-containers # --prefix
        exit 1
    fi
    # a precausion as pebble logs is a bad indicator of the readiness state of
    # Traefik's readiness to use the cert for TLS termination.
    sleep 1
}

await_autohttps_tls_cert_save() {
    i=0; while [ $i -ne 60 ]; do
        kubectl logs deploy/autohttps -c secret-sync | grep "Created secret" \
            && saved_cert=true && break \
            || saved_cert=false && sleep 0.5 && i=$((i + 1))
    done
    if [ "$saved_cert" != "true" ]; then
        echo "Certificate acquisition failed!"
        kubectl get service,networkpolicy,configmap,pod
        kubectl describe pod -l app.kubernetes.io/name=pebble
        kubectl logs deploy/pebble --all-containers # --prefix
        kubectl describe pod -l app.kubernetes.io/name=pebble-coredns
        kubectl logs deploy/pebble-coredns --all-containers # --prefix
        kubectl describe pod -l component=autohttps
        kubectl logs deploy/autohttps --all-containers # --prefix
        exit 1
    fi
}

setup_kubeval () {
    echo "setup kubeval ${KUBEVAL_VERSION}"
    curl -sfL https://github.com/instrumenta/kubeval/releases/download/${KUBEVAL_VERSION}/kubeval-linux-amd64.tar.gz | tar xz kubeval
    sudo mv kubeval /usr/local/bin/
}

full_namespace_report () {
    # list config (secret,configmap)
    kubectl get secret,cm
    # list networking (service,ingress)
    kubectl get svc,ing
    # list workloads (deployment,statefulset,daemonset,pod)
    kubectl get deploy,sts,ds,pod

    # if any pod has any non-ready -> show its containers' logs
    kubectl get pods -o json \
        | jq '
        .items[]
        | select(
            any(.status.containerStatuses[]?; .ready == false)
        )
    | .metadata.name' \
        | xargs --max-args 1 --no-run-if-empty \
        sh -c 'printf "\nPod with non-ready container detected\n - Logs of $0:\n"; kubectl logs --all-containers $0'

    # if any pods that should be scheduled by the user-scheduler are pending ->
    # show user-scheduler's logs
    (
        kubectl get pods -l "component in (user-placeholder,singleuser-server)" -o json \
            | jq -r '
            .items[]
            | select(.status.phase == "Pending")
            | .metadata.name
        '
    ) | xargs --max-args 1 --no-run-if-empty --max-lines \
        sh -c 'printf "\nPending user pod detected ($0)\n - Logs of deploy/user-scheduler:\n"; kubectl logs --all-containers deploy/user-scheduler'

    echo ""
    echo "Just while debugging intermittent issue, lets output the logs of the hub."
    kubectl logs --all-containers deploy/hub

    echo ""
    echo "Just while debugging intermittent issue, lets output the logs of the proxy pod."
    kubectl logs --all-containers deploy/proxy
}

install_and_run_chartpress_and_pebble () {
    helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
    helm repo update
    # Install a local ACME server
    helm install pebble jupyterhub/pebble --values dev-config-pebble.yaml
    # Build our images if needed and update values.yaml with the tags
    pip3 install --no-cache-dir -r dev-requirements.txt
    chartpress
    await_pebble  # jupyterhub's autohttps communicates with it as the ACME server
}
